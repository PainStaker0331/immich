/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ServerConfigDto,
  ServerFeaturesDto,
  ServerInfoResponseDto,
  ServerMediaTypesResponseDto,
  ServerPingResponse,
  ServerStatsResponseDto,
  ServerThemeDto,
  ServerVersionResponseDto,
} from '../models/index';
import {
    ServerConfigDtoFromJSON,
    ServerConfigDtoToJSON,
    ServerFeaturesDtoFromJSON,
    ServerFeaturesDtoToJSON,
    ServerInfoResponseDtoFromJSON,
    ServerInfoResponseDtoToJSON,
    ServerMediaTypesResponseDtoFromJSON,
    ServerMediaTypesResponseDtoToJSON,
    ServerPingResponseFromJSON,
    ServerPingResponseToJSON,
    ServerStatsResponseDtoFromJSON,
    ServerStatsResponseDtoToJSON,
    ServerThemeDtoFromJSON,
    ServerThemeDtoToJSON,
    ServerVersionResponseDtoFromJSON,
    ServerVersionResponseDtoToJSON,
} from '../models/index';

/**
 * 
 */
export class ServerInfoApi extends runtime.BaseAPI {

    /**
     */
    async getServerConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerConfigDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/server-info/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerConfigDtoFromJSON(jsonValue));
    }

    /**
     */
    async getServerConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerConfigDto> {
        const response = await this.getServerConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getServerFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerFeaturesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/server-info/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerFeaturesDtoFromJSON(jsonValue));
    }

    /**
     */
    async getServerFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerFeaturesDto> {
        const response = await this.getServerFeaturesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getServerInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerInfoResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/server-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerInfoResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getServerInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerInfoResponseDto> {
        const response = await this.getServerInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getServerStatisticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerStatsResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/server-info/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerStatsResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getServerStatistics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerStatsResponseDto> {
        const response = await this.getServerStatisticsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getServerVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerVersionResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/server-info/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerVersionResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getServerVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerVersionResponseDto> {
        const response = await this.getServerVersionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSupportedMediaTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerMediaTypesResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/server-info/media-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerMediaTypesResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getSupportedMediaTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerMediaTypesResponseDto> {
        const response = await this.getSupportedMediaTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getThemeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerThemeDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/server-info/theme`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerThemeDtoFromJSON(jsonValue));
    }

    /**
     */
    async getTheme(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerThemeDto> {
        const response = await this.getThemeRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async pingServerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerPingResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/server-info/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerPingResponseFromJSON(jsonValue));
    }

    /**
     */
    async pingServer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerPingResponse> {
        const response = await this.pingServerRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async setAdminOnboardingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/server-info/admin-onboarding`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setAdminOnboarding(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setAdminOnboardingRaw(initOverrides);
    }

}
