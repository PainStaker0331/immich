/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditDeletesResponseDto,
  EntityType,
  FileChecksumDto,
  FileChecksumResponseDto,
  FileReportDto,
  FileReportFixDto,
} from '../models/index';
import {
    AuditDeletesResponseDtoFromJSON,
    AuditDeletesResponseDtoToJSON,
    EntityTypeFromJSON,
    EntityTypeToJSON,
    FileChecksumDtoFromJSON,
    FileChecksumDtoToJSON,
    FileChecksumResponseDtoFromJSON,
    FileChecksumResponseDtoToJSON,
    FileReportDtoFromJSON,
    FileReportDtoToJSON,
    FileReportFixDtoFromJSON,
    FileReportFixDtoToJSON,
} from '../models/index';

export interface FixAuditFilesRequest {
    fileReportFixDto: FileReportFixDto;
}

export interface GetAuditDeletesRequest {
    after: Date;
    entityType: EntityType;
    userId?: string;
}

export interface GetFileChecksumsRequest {
    fileChecksumDto: FileChecksumDto;
}

/**
 * 
 */
export class AuditApi extends runtime.BaseAPI {

    /**
     */
    async fixAuditFilesRaw(requestParameters: FixAuditFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fileReportFixDto === null || requestParameters.fileReportFixDto === undefined) {
            throw new runtime.RequiredError('fileReportFixDto','Required parameter requestParameters.fileReportFixDto was null or undefined when calling fixAuditFiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/audit/file-report/fix`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileReportFixDtoToJSON(requestParameters.fileReportFixDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async fixAuditFiles(requestParameters: FixAuditFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fixAuditFilesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAuditDeletesRaw(requestParameters: GetAuditDeletesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditDeletesResponseDto>> {
        if (requestParameters.after === null || requestParameters.after === undefined) {
            throw new runtime.RequiredError('after','Required parameter requestParameters.after was null or undefined when calling getAuditDeletes.');
        }

        if (requestParameters.entityType === null || requestParameters.entityType === undefined) {
            throw new runtime.RequiredError('entityType','Required parameter requestParameters.entityType was null or undefined when calling getAuditDeletes.');
        }

        const queryParameters: any = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString();
        }

        if (requestParameters.entityType !== undefined) {
            queryParameters['entityType'] = requestParameters.entityType;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/audit/deletes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditDeletesResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAuditDeletes(requestParameters: GetAuditDeletesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditDeletesResponseDto> {
        const response = await this.getAuditDeletesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuditFilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileReportDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/audit/file-report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileReportDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAuditFiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileReportDto> {
        const response = await this.getAuditFilesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getFileChecksumsRaw(requestParameters: GetFileChecksumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FileChecksumResponseDto>>> {
        if (requestParameters.fileChecksumDto === null || requestParameters.fileChecksumDto === undefined) {
            throw new runtime.RequiredError('fileChecksumDto','Required parameter requestParameters.fileChecksumDto was null or undefined when calling getFileChecksums.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/audit/file-report/checksum`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileChecksumDtoToJSON(requestParameters.fileChecksumDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileChecksumResponseDtoFromJSON));
    }

    /**
     */
    async getFileChecksums(requestParameters: GetFileChecksumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FileChecksumResponseDto>> {
        const response = await this.getFileChecksumsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
