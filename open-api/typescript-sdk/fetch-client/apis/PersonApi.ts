/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetFaceUpdateDto,
  AssetResponseDto,
  BulkIdResponseDto,
  MergePersonDto,
  PeopleResponseDto,
  PeopleUpdateDto,
  PersonResponseDto,
  PersonStatisticsResponseDto,
  PersonUpdateDto,
} from '../models/index';
import {
    AssetFaceUpdateDtoFromJSON,
    AssetFaceUpdateDtoToJSON,
    AssetResponseDtoFromJSON,
    AssetResponseDtoToJSON,
    BulkIdResponseDtoFromJSON,
    BulkIdResponseDtoToJSON,
    MergePersonDtoFromJSON,
    MergePersonDtoToJSON,
    PeopleResponseDtoFromJSON,
    PeopleResponseDtoToJSON,
    PeopleUpdateDtoFromJSON,
    PeopleUpdateDtoToJSON,
    PersonResponseDtoFromJSON,
    PersonResponseDtoToJSON,
    PersonStatisticsResponseDtoFromJSON,
    PersonStatisticsResponseDtoToJSON,
    PersonUpdateDtoFromJSON,
    PersonUpdateDtoToJSON,
} from '../models/index';

export interface GetAllPeopleRequest {
    withHidden?: boolean;
}

export interface GetPersonRequest {
    id: string;
}

export interface GetPersonAssetsRequest {
    id: string;
}

export interface GetPersonStatisticsRequest {
    id: string;
}

export interface GetPersonThumbnailRequest {
    id: string;
}

export interface MergePersonRequest {
    id: string;
    mergePersonDto: MergePersonDto;
}

export interface ReassignFacesRequest {
    id: string;
    assetFaceUpdateDto: AssetFaceUpdateDto;
}

export interface UpdatePeopleRequest {
    peopleUpdateDto: PeopleUpdateDto;
}

export interface UpdatePersonRequest {
    id: string;
    personUpdateDto: PersonUpdateDto;
}

/**
 * 
 */
export class PersonApi extends runtime.BaseAPI {

    /**
     */
    async createPersonRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createPerson(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonResponseDto> {
        const response = await this.createPersonRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllPeopleRaw(requestParameters: GetAllPeopleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeopleResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters.withHidden !== undefined) {
            queryParameters['withHidden'] = requestParameters.withHidden;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeopleResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAllPeople(requestParameters: GetAllPeopleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeopleResponseDto> {
        const response = await this.getAllPeopleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPersonRaw(requestParameters: GetPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPerson(requestParameters: GetPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonResponseDto> {
        const response = await this.getPersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPersonAssetsRaw(requestParameters: GetPersonAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonAssets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person/{id}/assets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetResponseDtoFromJSON));
    }

    /**
     */
    async getPersonAssets(requestParameters: GetPersonAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetResponseDto>> {
        const response = await this.getPersonAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPersonStatisticsRaw(requestParameters: GetPersonStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonStatisticsResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonStatistics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person/{id}/statistics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonStatisticsResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPersonStatistics(requestParameters: GetPersonStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonStatisticsResponseDto> {
        const response = await this.getPersonStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPersonThumbnailRaw(requestParameters: GetPersonThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonThumbnail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person/{id}/thumbnail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getPersonThumbnail(requestParameters: GetPersonThumbnailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getPersonThumbnailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async mergePersonRaw(requestParameters: MergePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkIdResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mergePerson.');
        }

        if (requestParameters.mergePersonDto === null || requestParameters.mergePersonDto === undefined) {
            throw new runtime.RequiredError('mergePersonDto','Required parameter requestParameters.mergePersonDto was null or undefined when calling mergePerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person/{id}/merge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MergePersonDtoToJSON(requestParameters.mergePersonDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkIdResponseDtoFromJSON));
    }

    /**
     */
    async mergePerson(requestParameters: MergePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkIdResponseDto>> {
        const response = await this.mergePersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reassignFacesRaw(requestParameters: ReassignFacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reassignFaces.');
        }

        if (requestParameters.assetFaceUpdateDto === null || requestParameters.assetFaceUpdateDto === undefined) {
            throw new runtime.RequiredError('assetFaceUpdateDto','Required parameter requestParameters.assetFaceUpdateDto was null or undefined when calling reassignFaces.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person/{id}/reassign`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetFaceUpdateDtoToJSON(requestParameters.assetFaceUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonResponseDtoFromJSON));
    }

    /**
     */
    async reassignFaces(requestParameters: ReassignFacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonResponseDto>> {
        const response = await this.reassignFacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePeopleRaw(requestParameters: UpdatePeopleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkIdResponseDto>>> {
        if (requestParameters.peopleUpdateDto === null || requestParameters.peopleUpdateDto === undefined) {
            throw new runtime.RequiredError('peopleUpdateDto','Required parameter requestParameters.peopleUpdateDto was null or undefined when calling updatePeople.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PeopleUpdateDtoToJSON(requestParameters.peopleUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkIdResponseDtoFromJSON));
    }

    /**
     */
    async updatePeople(requestParameters: UpdatePeopleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkIdResponseDto>> {
        const response = await this.updatePeopleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePersonRaw(requestParameters: UpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePerson.');
        }

        if (requestParameters.personUpdateDto === null || requestParameters.personUpdateDto === undefined) {
            throw new runtime.RequiredError('personUpdateDto','Required parameter requestParameters.personUpdateDto was null or undefined when calling updatePerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/person/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PersonUpdateDtoToJSON(requestParameters.personUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updatePerson(requestParameters: UpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonResponseDto> {
        const response = await this.updatePersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
