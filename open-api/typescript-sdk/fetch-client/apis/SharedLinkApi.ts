/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetIdsDto,
  AssetIdsResponseDto,
  SharedLinkCreateDto,
  SharedLinkEditDto,
  SharedLinkResponseDto,
} from '../models/index';
import {
    AssetIdsDtoFromJSON,
    AssetIdsDtoToJSON,
    AssetIdsResponseDtoFromJSON,
    AssetIdsResponseDtoToJSON,
    SharedLinkCreateDtoFromJSON,
    SharedLinkCreateDtoToJSON,
    SharedLinkEditDtoFromJSON,
    SharedLinkEditDtoToJSON,
    SharedLinkResponseDtoFromJSON,
    SharedLinkResponseDtoToJSON,
} from '../models/index';

export interface AddSharedLinkAssetsRequest {
    id: string;
    assetIdsDto: AssetIdsDto;
    key?: string;
}

export interface CreateSharedLinkRequest {
    sharedLinkCreateDto: SharedLinkCreateDto;
}

export interface GetMySharedLinkRequest {
    key?: string;
    password?: string;
    token?: string;
}

export interface GetSharedLinkByIdRequest {
    id: string;
}

export interface RemoveSharedLinkRequest {
    id: string;
}

export interface RemoveSharedLinkAssetsRequest {
    id: string;
    assetIdsDto: AssetIdsDto;
    key?: string;
}

export interface UpdateSharedLinkRequest {
    id: string;
    sharedLinkEditDto: SharedLinkEditDto;
}

/**
 * 
 */
export class SharedLinkApi extends runtime.BaseAPI {

    /**
     */
    async addSharedLinkAssetsRaw(requestParameters: AddSharedLinkAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetIdsResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addSharedLinkAssets.');
        }

        if (requestParameters.assetIdsDto === null || requestParameters.assetIdsDto === undefined) {
            throw new runtime.RequiredError('assetIdsDto','Required parameter requestParameters.assetIdsDto was null or undefined when calling addSharedLinkAssets.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shared-link/{id}/assets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetIdsDtoToJSON(requestParameters.assetIdsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetIdsResponseDtoFromJSON));
    }

    /**
     */
    async addSharedLinkAssets(requestParameters: AddSharedLinkAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetIdsResponseDto>> {
        const response = await this.addSharedLinkAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSharedLinkRaw(requestParameters: CreateSharedLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedLinkResponseDto>> {
        if (requestParameters.sharedLinkCreateDto === null || requestParameters.sharedLinkCreateDto === undefined) {
            throw new runtime.RequiredError('sharedLinkCreateDto','Required parameter requestParameters.sharedLinkCreateDto was null or undefined when calling createSharedLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shared-link`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SharedLinkCreateDtoToJSON(requestParameters.sharedLinkCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedLinkResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createSharedLink(requestParameters: CreateSharedLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedLinkResponseDto> {
        const response = await this.createSharedLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllSharedLinksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SharedLinkResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shared-link`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SharedLinkResponseDtoFromJSON));
    }

    /**
     */
    async getAllSharedLinks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SharedLinkResponseDto>> {
        const response = await this.getAllSharedLinksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getMySharedLinkRaw(requestParameters: GetMySharedLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedLinkResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shared-link/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedLinkResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMySharedLink(requestParameters: GetMySharedLinkRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedLinkResponseDto> {
        const response = await this.getMySharedLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSharedLinkByIdRaw(requestParameters: GetSharedLinkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedLinkResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSharedLinkById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shared-link/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedLinkResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getSharedLinkById(requestParameters: GetSharedLinkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedLinkResponseDto> {
        const response = await this.getSharedLinkByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeSharedLinkRaw(requestParameters: RemoveSharedLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeSharedLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shared-link/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeSharedLink(requestParameters: RemoveSharedLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSharedLinkRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeSharedLinkAssetsRaw(requestParameters: RemoveSharedLinkAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetIdsResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeSharedLinkAssets.');
        }

        if (requestParameters.assetIdsDto === null || requestParameters.assetIdsDto === undefined) {
            throw new runtime.RequiredError('assetIdsDto','Required parameter requestParameters.assetIdsDto was null or undefined when calling removeSharedLinkAssets.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shared-link/{id}/assets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AssetIdsDtoToJSON(requestParameters.assetIdsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetIdsResponseDtoFromJSON));
    }

    /**
     */
    async removeSharedLinkAssets(requestParameters: RemoveSharedLinkAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetIdsResponseDto>> {
        const response = await this.removeSharedLinkAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSharedLinkRaw(requestParameters: UpdateSharedLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedLinkResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSharedLink.');
        }

        if (requestParameters.sharedLinkEditDto === null || requestParameters.sharedLinkEditDto === undefined) {
            throw new runtime.RequiredError('sharedLinkEditDto','Required parameter requestParameters.sharedLinkEditDto was null or undefined when calling updateSharedLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shared-link/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SharedLinkEditDtoToJSON(requestParameters.sharedLinkEditDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedLinkResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateSharedLink(requestParameters: UpdateSharedLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedLinkResponseDto> {
        const response = await this.updateSharedLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
