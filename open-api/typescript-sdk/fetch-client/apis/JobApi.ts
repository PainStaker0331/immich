/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllJobStatusResponseDto,
  JobCommandDto,
  JobName,
  JobStatusDto,
} from '../models/index';
import {
    AllJobStatusResponseDtoFromJSON,
    AllJobStatusResponseDtoToJSON,
    JobCommandDtoFromJSON,
    JobCommandDtoToJSON,
    JobNameFromJSON,
    JobNameToJSON,
    JobStatusDtoFromJSON,
    JobStatusDtoToJSON,
} from '../models/index';

export interface SendJobCommandRequest {
    id: JobName;
    jobCommandDto: JobCommandDto;
}

/**
 * 
 */
export class JobApi extends runtime.BaseAPI {

    /**
     */
    async getAllJobsStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllJobStatusResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllJobStatusResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAllJobsStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllJobStatusResponseDto> {
        const response = await this.getAllJobsStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sendJobCommandRaw(requestParameters: SendJobCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobStatusDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sendJobCommand.');
        }

        if (requestParameters.jobCommandDto === null || requestParameters.jobCommandDto === undefined) {
            throw new runtime.RequiredError('jobCommandDto','Required parameter requestParameters.jobCommandDto was null or undefined when calling sendJobCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jobs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: JobCommandDtoToJSON(requestParameters.jobCommandDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async sendJobCommand(requestParameters: SendJobCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobStatusDto> {
        const response = await this.sendJobCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
