/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginResponseDto,
  OAuthAuthorizeResponseDto,
  OAuthCallbackDto,
  OAuthConfigDto,
  OAuthConfigResponseDto,
  UserResponseDto,
} from '../models/index';
import {
    LoginResponseDtoFromJSON,
    LoginResponseDtoToJSON,
    OAuthAuthorizeResponseDtoFromJSON,
    OAuthAuthorizeResponseDtoToJSON,
    OAuthCallbackDtoFromJSON,
    OAuthCallbackDtoToJSON,
    OAuthConfigDtoFromJSON,
    OAuthConfigDtoToJSON,
    OAuthConfigResponseDtoFromJSON,
    OAuthConfigResponseDtoToJSON,
    UserResponseDtoFromJSON,
    UserResponseDtoToJSON,
} from '../models/index';

export interface FinishOAuthRequest {
    oAuthCallbackDto: OAuthCallbackDto;
}

export interface GenerateOAuthConfigRequest {
    oAuthConfigDto: OAuthConfigDto;
}

export interface LinkOAuthAccountRequest {
    oAuthCallbackDto: OAuthCallbackDto;
}

export interface StartOAuthRequest {
    oAuthConfigDto: OAuthConfigDto;
}

/**
 * 
 */
export class OAuthApi extends runtime.BaseAPI {

    /**
     */
    async finishOAuthRaw(requestParameters: FinishOAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseDto>> {
        if (requestParameters.oAuthCallbackDto === null || requestParameters.oAuthCallbackDto === undefined) {
            throw new runtime.RequiredError('oAuthCallbackDto','Required parameter requestParameters.oAuthCallbackDto was null or undefined when calling finishOAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/oauth/callback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthCallbackDtoToJSON(requestParameters.oAuthCallbackDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async finishOAuth(requestParameters: FinishOAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseDto> {
        const response = await this.finishOAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * @deprecated use feature flags and /oauth/authorize
     * @deprecated
     */
    async generateOAuthConfigRaw(requestParameters: GenerateOAuthConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthConfigResponseDto>> {
        if (requestParameters.oAuthConfigDto === null || requestParameters.oAuthConfigDto === undefined) {
            throw new runtime.RequiredError('oAuthConfigDto','Required parameter requestParameters.oAuthConfigDto was null or undefined when calling generateOAuthConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/oauth/config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthConfigDtoToJSON(requestParameters.oAuthConfigDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthConfigResponseDtoFromJSON(jsonValue));
    }

    /**
     * @deprecated use feature flags and /oauth/authorize
     * @deprecated
     */
    async generateOAuthConfig(requestParameters: GenerateOAuthConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthConfigResponseDto> {
        const response = await this.generateOAuthConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkOAuthAccountRaw(requestParameters: LinkOAuthAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters.oAuthCallbackDto === null || requestParameters.oAuthCallbackDto === undefined) {
            throw new runtime.RequiredError('oAuthCallbackDto','Required parameter requestParameters.oAuthCallbackDto was null or undefined when calling linkOAuthAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/oauth/link`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthCallbackDtoToJSON(requestParameters.oAuthCallbackDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async linkOAuthAccount(requestParameters: LinkOAuthAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.linkOAuthAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async redirectOAuthToMobileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth/mobile-redirect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async redirectOAuthToMobile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.redirectOAuthToMobileRaw(initOverrides);
    }

    /**
     */
    async startOAuthRaw(requestParameters: StartOAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthAuthorizeResponseDto>> {
        if (requestParameters.oAuthConfigDto === null || requestParameters.oAuthConfigDto === undefined) {
            throw new runtime.RequiredError('oAuthConfigDto','Required parameter requestParameters.oAuthConfigDto was null or undefined when calling startOAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/oauth/authorize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthConfigDtoToJSON(requestParameters.oAuthConfigDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthAuthorizeResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async startOAuth(requestParameters: StartOAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthAuthorizeResponseDto> {
        const response = await this.startOAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlinkOAuthAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/oauth/unlink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async unlinkOAuthAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.unlinkOAuthAccountRaw(initOverrides);
        return await response.value();
    }

}
