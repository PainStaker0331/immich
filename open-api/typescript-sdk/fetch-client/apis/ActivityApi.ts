/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityCreateDto,
  ActivityResponseDto,
  ActivityStatisticsResponseDto,
  ReactionLevel,
  ReactionType,
} from '../models/index';
import {
    ActivityCreateDtoFromJSON,
    ActivityCreateDtoToJSON,
    ActivityResponseDtoFromJSON,
    ActivityResponseDtoToJSON,
    ActivityStatisticsResponseDtoFromJSON,
    ActivityStatisticsResponseDtoToJSON,
    ReactionLevelFromJSON,
    ReactionLevelToJSON,
    ReactionTypeFromJSON,
    ReactionTypeToJSON,
} from '../models/index';

export interface CreateActivityRequest {
    activityCreateDto: ActivityCreateDto;
}

export interface DeleteActivityRequest {
    id: string;
}

export interface GetActivitiesRequest {
    albumId: string;
    assetId?: string;
    level?: ReactionLevel;
    type?: ReactionType;
    userId?: string;
}

export interface GetActivityStatisticsRequest {
    albumId: string;
    assetId?: string;
}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI {

    /**
     */
    async createActivityRaw(requestParameters: CreateActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityResponseDto>> {
        if (requestParameters.activityCreateDto === null || requestParameters.activityCreateDto === undefined) {
            throw new runtime.RequiredError('activityCreateDto','Required parameter requestParameters.activityCreateDto was null or undefined when calling createActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivityCreateDtoToJSON(requestParameters.activityCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createActivity(requestParameters: CreateActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityResponseDto> {
        const response = await this.createActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteActivityRaw(requestParameters: DeleteActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteActivity(requestParameters: DeleteActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteActivityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getActivitiesRaw(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActivityResponseDto>>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling getActivities.');
        }

        const queryParameters: any = {};

        if (requestParameters.albumId !== undefined) {
            queryParameters['albumId'] = requestParameters.albumId;
        }

        if (requestParameters.assetId !== undefined) {
            queryParameters['assetId'] = requestParameters.assetId;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityResponseDtoFromJSON));
    }

    /**
     */
    async getActivities(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActivityResponseDto>> {
        const response = await this.getActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getActivityStatisticsRaw(requestParameters: GetActivityStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityStatisticsResponseDto>> {
        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling getActivityStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.albumId !== undefined) {
            queryParameters['albumId'] = requestParameters.albumId;
        }

        if (requestParameters.assetId !== undefined) {
            queryParameters['assetId'] = requestParameters.assetId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activity/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityStatisticsResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getActivityStatistics(requestParameters: GetActivityStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityStatisticsResponseDto> {
        const response = await this.getActivityStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
