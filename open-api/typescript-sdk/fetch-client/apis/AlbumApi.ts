/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUsersDto,
  AlbumCountResponseDto,
  AlbumResponseDto,
  BulkIdResponseDto,
  BulkIdsDto,
  CreateAlbumDto,
  UpdateAlbumDto,
} from '../models/index';
import {
    AddUsersDtoFromJSON,
    AddUsersDtoToJSON,
    AlbumCountResponseDtoFromJSON,
    AlbumCountResponseDtoToJSON,
    AlbumResponseDtoFromJSON,
    AlbumResponseDtoToJSON,
    BulkIdResponseDtoFromJSON,
    BulkIdResponseDtoToJSON,
    BulkIdsDtoFromJSON,
    BulkIdsDtoToJSON,
    CreateAlbumDtoFromJSON,
    CreateAlbumDtoToJSON,
    UpdateAlbumDtoFromJSON,
    UpdateAlbumDtoToJSON,
} from '../models/index';

export interface AddAssetsToAlbumRequest {
    id: string;
    bulkIdsDto: BulkIdsDto;
    key?: string;
}

export interface AddUsersToAlbumRequest {
    id: string;
    addUsersDto: AddUsersDto;
}

export interface CreateAlbumRequest {
    createAlbumDto: CreateAlbumDto;
}

export interface DeleteAlbumRequest {
    id: string;
}

export interface GetAlbumInfoRequest {
    id: string;
    key?: string;
    withoutAssets?: boolean;
}

export interface GetAllAlbumsRequest {
    assetId?: string;
    shared?: boolean;
}

export interface RemoveAssetFromAlbumRequest {
    id: string;
    bulkIdsDto: BulkIdsDto;
}

export interface RemoveUserFromAlbumRequest {
    id: string;
    userId: string;
}

export interface UpdateAlbumInfoRequest {
    id: string;
    updateAlbumDto: UpdateAlbumDto;
}

/**
 * 
 */
export class AlbumApi extends runtime.BaseAPI {

    /**
     */
    async addAssetsToAlbumRaw(requestParameters: AddAssetsToAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkIdResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addAssetsToAlbum.');
        }

        if (requestParameters.bulkIdsDto === null || requestParameters.bulkIdsDto === undefined) {
            throw new runtime.RequiredError('bulkIdsDto','Required parameter requestParameters.bulkIdsDto was null or undefined when calling addAssetsToAlbum.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{id}/assets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BulkIdsDtoToJSON(requestParameters.bulkIdsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkIdResponseDtoFromJSON));
    }

    /**
     */
    async addAssetsToAlbum(requestParameters: AddAssetsToAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkIdResponseDto>> {
        const response = await this.addAssetsToAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addUsersToAlbumRaw(requestParameters: AddUsersToAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addUsersToAlbum.');
        }

        if (requestParameters.addUsersDto === null || requestParameters.addUsersDto === undefined) {
            throw new runtime.RequiredError('addUsersDto','Required parameter requestParameters.addUsersDto was null or undefined when calling addUsersToAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddUsersDtoToJSON(requestParameters.addUsersDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async addUsersToAlbum(requestParameters: AddUsersToAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.addUsersToAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createAlbumRaw(requestParameters: CreateAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.createAlbumDto === null || requestParameters.createAlbumDto === undefined) {
            throw new runtime.RequiredError('createAlbumDto','Required parameter requestParameters.createAlbumDto was null or undefined when calling createAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAlbumDtoToJSON(requestParameters.createAlbumDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createAlbum(requestParameters: CreateAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.createAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAlbumRaw(requestParameters: DeleteAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAlbum(requestParameters: DeleteAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAlbumRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAlbumCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumCountResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumCountResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAlbumCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumCountResponseDto> {
        const response = await this.getAlbumCountRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAlbumInfoRaw(requestParameters: GetAlbumInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAlbumInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.withoutAssets !== undefined) {
            queryParameters['withoutAssets'] = requestParameters.withoutAssets;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAlbumInfo(requestParameters: GetAlbumInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.getAlbumInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllAlbumsRaw(requestParameters: GetAllAlbumsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlbumResponseDto>>> {
        const queryParameters: any = {};

        if (requestParameters.assetId !== undefined) {
            queryParameters['assetId'] = requestParameters.assetId;
        }

        if (requestParameters.shared !== undefined) {
            queryParameters['shared'] = requestParameters.shared;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlbumResponseDtoFromJSON));
    }

    /**
     */
    async getAllAlbums(requestParameters: GetAllAlbumsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlbumResponseDto>> {
        const response = await this.getAllAlbumsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeAssetFromAlbumRaw(requestParameters: RemoveAssetFromAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkIdResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeAssetFromAlbum.');
        }

        if (requestParameters.bulkIdsDto === null || requestParameters.bulkIdsDto === undefined) {
            throw new runtime.RequiredError('bulkIdsDto','Required parameter requestParameters.bulkIdsDto was null or undefined when calling removeAssetFromAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{id}/assets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: BulkIdsDtoToJSON(requestParameters.bulkIdsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkIdResponseDtoFromJSON));
    }

    /**
     */
    async removeAssetFromAlbum(requestParameters: RemoveAssetFromAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkIdResponseDto>> {
        const response = await this.removeAssetFromAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeUserFromAlbumRaw(requestParameters: RemoveUserFromAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeUserFromAlbum.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUserFromAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{id}/user/{userId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeUserFromAlbum(requestParameters: RemoveUserFromAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserFromAlbumRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateAlbumInfoRaw(requestParameters: UpdateAlbumInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlbumResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAlbumInfo.');
        }

        if (requestParameters.updateAlbumDto === null || requestParameters.updateAlbumDto === undefined) {
            throw new runtime.RequiredError('updateAlbumDto','Required parameter requestParameters.updateAlbumDto was null or undefined when calling updateAlbumInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/album/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAlbumDtoToJSON(requestParameters.updateAlbumDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlbumResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateAlbumInfo(requestParameters: UpdateAlbumInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlbumResponseDto> {
        const response = await this.updateAlbumInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
