/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetFaceResponseDto,
  FaceDto,
  PersonResponseDto,
} from '../models/index';
import {
    AssetFaceResponseDtoFromJSON,
    AssetFaceResponseDtoToJSON,
    FaceDtoFromJSON,
    FaceDtoToJSON,
    PersonResponseDtoFromJSON,
    PersonResponseDtoToJSON,
} from '../models/index';

export interface GetFacesRequest {
    id: string;
}

export interface ReassignFacesByIdRequest {
    id: string;
    faceDto: FaceDto;
}

/**
 * 
 */
export class FaceApi extends runtime.BaseAPI {

    /**
     */
    async getFacesRaw(requestParameters: GetFacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetFaceResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFaces.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/face`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetFaceResponseDtoFromJSON));
    }

    /**
     */
    async getFaces(requestParameters: GetFacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetFaceResponseDto>> {
        const response = await this.getFacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reassignFacesByIdRaw(requestParameters: ReassignFacesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reassignFacesById.');
        }

        if (requestParameters.faceDto === null || requestParameters.faceDto === undefined) {
            throw new runtime.RequiredError('faceDto','Required parameter requestParameters.faceDto was null or undefined when calling reassignFacesById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/face/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FaceDtoToJSON(requestParameters.faceDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async reassignFacesById(requestParameters: ReassignFacesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonResponseDto> {
        const response = await this.reassignFacesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
