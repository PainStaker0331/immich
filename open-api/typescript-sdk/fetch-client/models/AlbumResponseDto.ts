/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssetResponseDto } from './AssetResponseDto';
import {
    AssetResponseDtoFromJSON,
    AssetResponseDtoFromJSONTyped,
    AssetResponseDtoToJSON,
} from './AssetResponseDto';
import type { UserResponseDto } from './UserResponseDto';
import {
    UserResponseDtoFromJSON,
    UserResponseDtoFromJSONTyped,
    UserResponseDtoToJSON,
} from './UserResponseDto';

/**
 * 
 * @export
 * @interface AlbumResponseDto
 */
export interface AlbumResponseDto {
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseDto
     */
    albumName: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseDto
     */
    albumThumbnailAssetId: string | null;
    /**
     * 
     * @type {number}
     * @memberof AlbumResponseDto
     */
    assetCount: number;
    /**
     * 
     * @type {Array<AssetResponseDto>}
     * @memberof AlbumResponseDto
     */
    assets: Array<AssetResponseDto>;
    /**
     * 
     * @type {Date}
     * @memberof AlbumResponseDto
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseDto
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof AlbumResponseDto
     */
    endDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof AlbumResponseDto
     */
    hasSharedLink: boolean;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseDto
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof AlbumResponseDto
     */
    isActivityEnabled: boolean;
    /**
     * 
     * @type {Date}
     * @memberof AlbumResponseDto
     */
    lastModifiedAssetTimestamp?: Date;
    /**
     * 
     * @type {UserResponseDto}
     * @memberof AlbumResponseDto
     */
    owner: UserResponseDto;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseDto
     */
    ownerId: string;
    /**
     * 
     * @type {boolean}
     * @memberof AlbumResponseDto
     */
    shared: boolean;
    /**
     * 
     * @type {Array<UserResponseDto>}
     * @memberof AlbumResponseDto
     */
    sharedUsers: Array<UserResponseDto>;
    /**
     * 
     * @type {Date}
     * @memberof AlbumResponseDto
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AlbumResponseDto
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the AlbumResponseDto interface.
 */
export function instanceOfAlbumResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "albumName" in value;
    isInstance = isInstance && "albumThumbnailAssetId" in value;
    isInstance = isInstance && "assetCount" in value;
    isInstance = isInstance && "assets" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "hasSharedLink" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "isActivityEnabled" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "shared" in value;
    isInstance = isInstance && "sharedUsers" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function AlbumResponseDtoFromJSON(json: any): AlbumResponseDto {
    return AlbumResponseDtoFromJSONTyped(json, false);
}

export function AlbumResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlbumResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'albumName': json['albumName'],
        'albumThumbnailAssetId': json['albumThumbnailAssetId'],
        'assetCount': json['assetCount'],
        'assets': ((json['assets'] as Array<any>).map(AssetResponseDtoFromJSON)),
        'createdAt': (new Date(json['createdAt'])),
        'description': json['description'],
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'hasSharedLink': json['hasSharedLink'],
        'id': json['id'],
        'isActivityEnabled': json['isActivityEnabled'],
        'lastModifiedAssetTimestamp': !exists(json, 'lastModifiedAssetTimestamp') ? undefined : (new Date(json['lastModifiedAssetTimestamp'])),
        'owner': UserResponseDtoFromJSON(json['owner']),
        'ownerId': json['ownerId'],
        'shared': json['shared'],
        'sharedUsers': ((json['sharedUsers'] as Array<any>).map(UserResponseDtoFromJSON)),
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function AlbumResponseDtoToJSON(value?: AlbumResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'albumName': value.albumName,
        'albumThumbnailAssetId': value.albumThumbnailAssetId,
        'assetCount': value.assetCount,
        'assets': ((value.assets as Array<any>).map(AssetResponseDtoToJSON)),
        'createdAt': (value.createdAt.toISOString()),
        'description': value.description,
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        'hasSharedLink': value.hasSharedLink,
        'id': value.id,
        'isActivityEnabled': value.isActivityEnabled,
        'lastModifiedAssetTimestamp': value.lastModifiedAssetTimestamp === undefined ? undefined : (value.lastModifiedAssetTimestamp.toISOString()),
        'owner': UserResponseDtoToJSON(value.owner),
        'ownerId': value.ownerId,
        'shared': value.shared,
        'sharedUsers': ((value.sharedUsers as Array<any>).map(UserResponseDtoToJSON)),
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

