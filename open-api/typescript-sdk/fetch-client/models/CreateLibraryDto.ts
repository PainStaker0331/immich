/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LibraryType } from './LibraryType';
import {
    LibraryTypeFromJSON,
    LibraryTypeFromJSONTyped,
    LibraryTypeToJSON,
} from './LibraryType';

/**
 * 
 * @export
 * @interface CreateLibraryDto
 */
export interface CreateLibraryDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateLibraryDto
     */
    exclusionPatterns?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateLibraryDto
     */
    importPaths?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CreateLibraryDto
     */
    isVisible?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateLibraryDto
     */
    isWatched?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateLibraryDto
     */
    name?: string;
    /**
     * 
     * @type {LibraryType}
     * @memberof CreateLibraryDto
     */
    type: LibraryType;
}

/**
 * Check if a given object implements the CreateLibraryDto interface.
 */
export function instanceOfCreateLibraryDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function CreateLibraryDtoFromJSON(json: any): CreateLibraryDto {
    return CreateLibraryDtoFromJSONTyped(json, false);
}

export function CreateLibraryDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateLibraryDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exclusionPatterns': !exists(json, 'exclusionPatterns') ? undefined : json['exclusionPatterns'],
        'importPaths': !exists(json, 'importPaths') ? undefined : json['importPaths'],
        'isVisible': !exists(json, 'isVisible') ? undefined : json['isVisible'],
        'isWatched': !exists(json, 'isWatched') ? undefined : json['isWatched'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': LibraryTypeFromJSON(json['type']),
    };
}

export function CreateLibraryDtoToJSON(value?: CreateLibraryDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exclusionPatterns': value.exclusionPatterns,
        'importPaths': value.importPaths,
        'isVisible': value.isVisible,
        'isWatched': value.isWatched,
        'name': value.name,
        'type': LibraryTypeToJSON(value.type),
    };
}

