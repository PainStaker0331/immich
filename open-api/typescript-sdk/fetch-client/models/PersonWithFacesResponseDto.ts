/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssetFaceWithoutPersonResponseDto } from './AssetFaceWithoutPersonResponseDto';
import {
    AssetFaceWithoutPersonResponseDtoFromJSON,
    AssetFaceWithoutPersonResponseDtoFromJSONTyped,
    AssetFaceWithoutPersonResponseDtoToJSON,
} from './AssetFaceWithoutPersonResponseDto';

/**
 * 
 * @export
 * @interface PersonWithFacesResponseDto
 */
export interface PersonWithFacesResponseDto {
    /**
     * 
     * @type {Date}
     * @memberof PersonWithFacesResponseDto
     */
    birthDate: Date | null;
    /**
     * 
     * @type {Array<AssetFaceWithoutPersonResponseDto>}
     * @memberof PersonWithFacesResponseDto
     */
    faces: Array<AssetFaceWithoutPersonResponseDto>;
    /**
     * 
     * @type {string}
     * @memberof PersonWithFacesResponseDto
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof PersonWithFacesResponseDto
     */
    isHidden: boolean;
    /**
     * 
     * @type {string}
     * @memberof PersonWithFacesResponseDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PersonWithFacesResponseDto
     */
    thumbnailPath: string;
}

/**
 * Check if a given object implements the PersonWithFacesResponseDto interface.
 */
export function instanceOfPersonWithFacesResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "birthDate" in value;
    isInstance = isInstance && "faces" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "isHidden" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "thumbnailPath" in value;

    return isInstance;
}

export function PersonWithFacesResponseDtoFromJSON(json: any): PersonWithFacesResponseDto {
    return PersonWithFacesResponseDtoFromJSONTyped(json, false);
}

export function PersonWithFacesResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonWithFacesResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'birthDate': (json['birthDate'] === null ? null : new Date(json['birthDate'])),
        'faces': ((json['faces'] as Array<any>).map(AssetFaceWithoutPersonResponseDtoFromJSON)),
        'id': json['id'],
        'isHidden': json['isHidden'],
        'name': json['name'],
        'thumbnailPath': json['thumbnailPath'],
    };
}

export function PersonWithFacesResponseDtoToJSON(value?: PersonWithFacesResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'birthDate': (value.birthDate === null ? null : value.birthDate.toISOString().substring(0,10)),
        'faces': ((value.faces as Array<any>).map(AssetFaceWithoutPersonResponseDtoToJSON)),
        'id': value.id,
        'isHidden': value.isHidden,
        'name': value.name,
        'thumbnailPath': value.thumbnailPath,
    };
}

