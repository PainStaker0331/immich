/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserAvatarColor } from './UserAvatarColor';
import {
    UserAvatarColorFromJSON,
    UserAvatarColorFromJSONTyped,
    UserAvatarColorToJSON,
} from './UserAvatarColor';

/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * 
     * @type {UserAvatarColor}
     * @memberof UserResponseDto
     */
    avatarColor: UserAvatarColor;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseDto
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseDto
     */
    deletedAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    externalPath: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseDto
     */
    isAdmin: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseDto
     */
    memoriesEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    oauthId: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    profileImagePath: string;
    /**
     * 
     * @type {number}
     * @memberof UserResponseDto
     */
    quotaSizeInBytes: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserResponseDto
     */
    quotaUsageInBytes: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponseDto
     */
    shouldChangePassword: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDto
     */
    storageLabel: string | null;
    /**
     * 
     * @type {Date}
     * @memberof UserResponseDto
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the UserResponseDto interface.
 */
export function instanceOfUserResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "avatarColor" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "deletedAt" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "externalPath" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "isAdmin" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "oauthId" in value;
    isInstance = isInstance && "profileImagePath" in value;
    isInstance = isInstance && "quotaSizeInBytes" in value;
    isInstance = isInstance && "quotaUsageInBytes" in value;
    isInstance = isInstance && "shouldChangePassword" in value;
    isInstance = isInstance && "storageLabel" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function UserResponseDtoFromJSON(json: any): UserResponseDto {
    return UserResponseDtoFromJSONTyped(json, false);
}

export function UserResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'avatarColor': UserAvatarColorFromJSON(json['avatarColor']),
        'createdAt': (new Date(json['createdAt'])),
        'deletedAt': (json['deletedAt'] === null ? null : new Date(json['deletedAt'])),
        'email': json['email'],
        'externalPath': json['externalPath'],
        'id': json['id'],
        'isAdmin': json['isAdmin'],
        'memoriesEnabled': !exists(json, 'memoriesEnabled') ? undefined : json['memoriesEnabled'],
        'name': json['name'],
        'oauthId': json['oauthId'],
        'profileImagePath': json['profileImagePath'],
        'quotaSizeInBytes': json['quotaSizeInBytes'],
        'quotaUsageInBytes': json['quotaUsageInBytes'],
        'shouldChangePassword': json['shouldChangePassword'],
        'storageLabel': json['storageLabel'],
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function UserResponseDtoToJSON(value?: UserResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'avatarColor': UserAvatarColorToJSON(value.avatarColor),
        'createdAt': (value.createdAt.toISOString()),
        'deletedAt': (value.deletedAt === null ? null : value.deletedAt.toISOString()),
        'email': value.email,
        'externalPath': value.externalPath,
        'id': value.id,
        'isAdmin': value.isAdmin,
        'memoriesEnabled': value.memoriesEnabled,
        'name': value.name,
        'oauthId': value.oauthId,
        'profileImagePath': value.profileImagePath,
        'quotaSizeInBytes': value.quotaSizeInBytes,
        'quotaUsageInBytes': value.quotaUsageInBytes,
        'shouldChangePassword': value.shouldChangePassword,
        'storageLabel': value.storageLabel,
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

