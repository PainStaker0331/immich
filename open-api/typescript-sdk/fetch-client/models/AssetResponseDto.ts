/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssetTypeEnum } from './AssetTypeEnum';
import {
    AssetTypeEnumFromJSON,
    AssetTypeEnumFromJSONTyped,
    AssetTypeEnumToJSON,
} from './AssetTypeEnum';
import type { ExifResponseDto } from './ExifResponseDto';
import {
    ExifResponseDtoFromJSON,
    ExifResponseDtoFromJSONTyped,
    ExifResponseDtoToJSON,
} from './ExifResponseDto';
import type { PersonWithFacesResponseDto } from './PersonWithFacesResponseDto';
import {
    PersonWithFacesResponseDtoFromJSON,
    PersonWithFacesResponseDtoFromJSONTyped,
    PersonWithFacesResponseDtoToJSON,
} from './PersonWithFacesResponseDto';
import type { SmartInfoResponseDto } from './SmartInfoResponseDto';
import {
    SmartInfoResponseDtoFromJSON,
    SmartInfoResponseDtoFromJSONTyped,
    SmartInfoResponseDtoToJSON,
} from './SmartInfoResponseDto';
import type { TagResponseDto } from './TagResponseDto';
import {
    TagResponseDtoFromJSON,
    TagResponseDtoFromJSONTyped,
    TagResponseDtoToJSON,
} from './TagResponseDto';
import type { UserResponseDto } from './UserResponseDto';
import {
    UserResponseDtoFromJSON,
    UserResponseDtoFromJSONTyped,
    UserResponseDtoToJSON,
} from './UserResponseDto';

/**
 * 
 * @export
 * @interface AssetResponseDto
 */
export interface AssetResponseDto {
    /**
     * base64 encoded sha1 hash
     * @type {string}
     * @memberof AssetResponseDto
     */
    checksum: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    deviceAssetId: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    deviceId: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    duration: string;
    /**
     * 
     * @type {ExifResponseDto}
     * @memberof AssetResponseDto
     */
    exifInfo?: ExifResponseDto;
    /**
     * 
     * @type {Date}
     * @memberof AssetResponseDto
     */
    fileCreatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof AssetResponseDto
     */
    fileModifiedAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDto
     */
    hasMetadata: boolean;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDto
     */
    isArchived: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDto
     */
    isExternal: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDto
     */
    isFavorite: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDto
     */
    isOffline: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDto
     */
    isReadOnly: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDto
     */
    isTrashed: boolean;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    libraryId: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    livePhotoVideoId?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof AssetResponseDto
     */
    localDateTime: Date;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    originalFileName: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    originalPath: string;
    /**
     * 
     * @type {UserResponseDto}
     * @memberof AssetResponseDto
     */
    owner?: UserResponseDto;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    ownerId: string;
    /**
     * 
     * @type {Array<PersonWithFacesResponseDto>}
     * @memberof AssetResponseDto
     */
    people?: Array<PersonWithFacesResponseDto>;
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDto
     */
    resized: boolean;
    /**
     * 
     * @type {SmartInfoResponseDto}
     * @memberof AssetResponseDto
     */
    smartInfo?: SmartInfoResponseDto;
    /**
     * 
     * @type {Array<AssetResponseDto>}
     * @memberof AssetResponseDto
     */
    stack?: Array<AssetResponseDto>;
    /**
     * 
     * @type {number}
     * @memberof AssetResponseDto
     */
    stackCount: number | null;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    stackParentId?: string | null;
    /**
     * 
     * @type {Array<TagResponseDto>}
     * @memberof AssetResponseDto
     */
    tags?: Array<TagResponseDto>;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    thumbhash: string | null;
    /**
     * 
     * @type {AssetTypeEnum}
     * @memberof AssetResponseDto
     */
    type: AssetTypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof AssetResponseDto
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the AssetResponseDto interface.
 */
export function instanceOfAssetResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "checksum" in value;
    isInstance = isInstance && "deviceAssetId" in value;
    isInstance = isInstance && "deviceId" in value;
    isInstance = isInstance && "duration" in value;
    isInstance = isInstance && "fileCreatedAt" in value;
    isInstance = isInstance && "fileModifiedAt" in value;
    isInstance = isInstance && "hasMetadata" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "isArchived" in value;
    isInstance = isInstance && "isExternal" in value;
    isInstance = isInstance && "isFavorite" in value;
    isInstance = isInstance && "isOffline" in value;
    isInstance = isInstance && "isReadOnly" in value;
    isInstance = isInstance && "isTrashed" in value;
    isInstance = isInstance && "libraryId" in value;
    isInstance = isInstance && "localDateTime" in value;
    isInstance = isInstance && "originalFileName" in value;
    isInstance = isInstance && "originalPath" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "resized" in value;
    isInstance = isInstance && "stackCount" in value;
    isInstance = isInstance && "thumbhash" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function AssetResponseDtoFromJSON(json: any): AssetResponseDto {
    return AssetResponseDtoFromJSONTyped(json, false);
}

export function AssetResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssetResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'checksum': json['checksum'],
        'deviceAssetId': json['deviceAssetId'],
        'deviceId': json['deviceId'],
        'duration': json['duration'],
        'exifInfo': !exists(json, 'exifInfo') ? undefined : ExifResponseDtoFromJSON(json['exifInfo']),
        'fileCreatedAt': (new Date(json['fileCreatedAt'])),
        'fileModifiedAt': (new Date(json['fileModifiedAt'])),
        'hasMetadata': json['hasMetadata'],
        'id': json['id'],
        'isArchived': json['isArchived'],
        'isExternal': json['isExternal'],
        'isFavorite': json['isFavorite'],
        'isOffline': json['isOffline'],
        'isReadOnly': json['isReadOnly'],
        'isTrashed': json['isTrashed'],
        'libraryId': json['libraryId'],
        'livePhotoVideoId': !exists(json, 'livePhotoVideoId') ? undefined : json['livePhotoVideoId'],
        'localDateTime': (new Date(json['localDateTime'])),
        'originalFileName': json['originalFileName'],
        'originalPath': json['originalPath'],
        'owner': !exists(json, 'owner') ? undefined : UserResponseDtoFromJSON(json['owner']),
        'ownerId': json['ownerId'],
        'people': !exists(json, 'people') ? undefined : ((json['people'] as Array<any>).map(PersonWithFacesResponseDtoFromJSON)),
        'resized': json['resized'],
        'smartInfo': !exists(json, 'smartInfo') ? undefined : SmartInfoResponseDtoFromJSON(json['smartInfo']),
        'stack': !exists(json, 'stack') ? undefined : ((json['stack'] as Array<any>).map(AssetResponseDtoFromJSON)),
        'stackCount': json['stackCount'],
        'stackParentId': !exists(json, 'stackParentId') ? undefined : json['stackParentId'],
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagResponseDtoFromJSON)),
        'thumbhash': json['thumbhash'],
        'type': AssetTypeEnumFromJSON(json['type']),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function AssetResponseDtoToJSON(value?: AssetResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'checksum': value.checksum,
        'deviceAssetId': value.deviceAssetId,
        'deviceId': value.deviceId,
        'duration': value.duration,
        'exifInfo': ExifResponseDtoToJSON(value.exifInfo),
        'fileCreatedAt': (value.fileCreatedAt.toISOString()),
        'fileModifiedAt': (value.fileModifiedAt.toISOString()),
        'hasMetadata': value.hasMetadata,
        'id': value.id,
        'isArchived': value.isArchived,
        'isExternal': value.isExternal,
        'isFavorite': value.isFavorite,
        'isOffline': value.isOffline,
        'isReadOnly': value.isReadOnly,
        'isTrashed': value.isTrashed,
        'libraryId': value.libraryId,
        'livePhotoVideoId': value.livePhotoVideoId,
        'localDateTime': (value.localDateTime.toISOString()),
        'originalFileName': value.originalFileName,
        'originalPath': value.originalPath,
        'owner': UserResponseDtoToJSON(value.owner),
        'ownerId': value.ownerId,
        'people': value.people === undefined ? undefined : ((value.people as Array<any>).map(PersonWithFacesResponseDtoToJSON)),
        'resized': value.resized,
        'smartInfo': SmartInfoResponseDtoToJSON(value.smartInfo),
        'stack': value.stack === undefined ? undefined : ((value.stack as Array<any>).map(AssetResponseDtoToJSON)),
        'stackCount': value.stackCount,
        'stackParentId': value.stackParentId,
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagResponseDtoToJSON)),
        'thumbhash': value.thumbhash,
        'type': AssetTypeEnumToJSON(value.type),
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

