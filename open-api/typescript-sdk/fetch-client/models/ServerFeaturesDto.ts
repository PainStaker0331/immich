/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ServerFeaturesDto
 */
export interface ServerFeaturesDto {
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    configFile: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    facialRecognition: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    map: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    oauth: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    oauthAutoLaunch: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    passwordLogin: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    reverseGeocoding: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    search: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    sidecar: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    smartSearch: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServerFeaturesDto
     */
    trash: boolean;
}

/**
 * Check if a given object implements the ServerFeaturesDto interface.
 */
export function instanceOfServerFeaturesDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "configFile" in value;
    isInstance = isInstance && "facialRecognition" in value;
    isInstance = isInstance && "map" in value;
    isInstance = isInstance && "oauth" in value;
    isInstance = isInstance && "oauthAutoLaunch" in value;
    isInstance = isInstance && "passwordLogin" in value;
    isInstance = isInstance && "reverseGeocoding" in value;
    isInstance = isInstance && "search" in value;
    isInstance = isInstance && "sidecar" in value;
    isInstance = isInstance && "smartSearch" in value;
    isInstance = isInstance && "trash" in value;

    return isInstance;
}

export function ServerFeaturesDtoFromJSON(json: any): ServerFeaturesDto {
    return ServerFeaturesDtoFromJSONTyped(json, false);
}

export function ServerFeaturesDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServerFeaturesDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configFile': json['configFile'],
        'facialRecognition': json['facialRecognition'],
        'map': json['map'],
        'oauth': json['oauth'],
        'oauthAutoLaunch': json['oauthAutoLaunch'],
        'passwordLogin': json['passwordLogin'],
        'reverseGeocoding': json['reverseGeocoding'],
        'search': json['search'],
        'sidecar': json['sidecar'],
        'smartSearch': json['smartSearch'],
        'trash': json['trash'],
    };
}

export function ServerFeaturesDtoToJSON(value?: ServerFeaturesDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configFile': value.configFile,
        'facialRecognition': value.facialRecognition,
        'map': value.map,
        'oauth': value.oauth,
        'oauthAutoLaunch': value.oauthAutoLaunch,
        'passwordLogin': value.passwordLogin,
        'reverseGeocoding': value.reverseGeocoding,
        'search': value.search,
        'sidecar': value.sidecar,
        'smartSearch': value.smartSearch,
        'trash': value.trash,
    };
}

