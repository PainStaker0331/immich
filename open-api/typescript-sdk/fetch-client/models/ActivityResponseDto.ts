/* tslint:disable */
/* eslint-disable */
/**
 * Immich
 * Immich API
 *
 * The version of the OpenAPI document: 1.94.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserDto } from './UserDto';
import {
    UserDtoFromJSON,
    UserDtoFromJSONTyped,
    UserDtoToJSON,
} from './UserDto';

/**
 * 
 * @export
 * @interface ActivityResponseDto
 */
export interface ActivityResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ActivityResponseDto
     */
    assetId: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActivityResponseDto
     */
    comment?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ActivityResponseDto
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ActivityResponseDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityResponseDto
     */
    type: ActivityResponseDtoTypeEnum;
    /**
     * 
     * @type {UserDto}
     * @memberof ActivityResponseDto
     */
    user: UserDto;
}


/**
 * @export
 */
export const ActivityResponseDtoTypeEnum = {
    Comment: 'comment',
    Like: 'like'
} as const;
export type ActivityResponseDtoTypeEnum = typeof ActivityResponseDtoTypeEnum[keyof typeof ActivityResponseDtoTypeEnum];


/**
 * Check if a given object implements the ActivityResponseDto interface.
 */
export function instanceOfActivityResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "assetId" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "user" in value;

    return isInstance;
}

export function ActivityResponseDtoFromJSON(json: any): ActivityResponseDto {
    return ActivityResponseDtoFromJSONTyped(json, false);
}

export function ActivityResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assetId': json['assetId'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'createdAt': (new Date(json['createdAt'])),
        'id': json['id'],
        'type': json['type'],
        'user': UserDtoFromJSON(json['user']),
    };
}

export function ActivityResponseDtoToJSON(value?: ActivityResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assetId': value.assetId,
        'comment': value.comment,
        'createdAt': (value.createdAt.toISOString()),
        'id': value.id,
        'type': value.type,
        'user': UserDtoToJSON(value.user),
    };
}

